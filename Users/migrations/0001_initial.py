# Generated by Django 2.2.5 on 2021-08-27 03:30

import django.contrib.auth.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='WorkerUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('phone', models.CharField(max_length=20)),
                ('password', models.CharField(max_length=120)),
                ('mail', models.EmailField(max_length=254)),
                ('ctime', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField()),
                ('sort', models.IntegerField()),
                ('jobs', models.CharField(max_length=20)),
                ('branch', models.CharField(max_length=20)),
                ('usercard', models.CharField(max_length=20)),
                ('jobnature', models.CharField(max_length=20)),
                ('tryout', models.IntegerField()),
                ('usernumber', models.IntegerField()),
                ('deleted', models.CharField(max_length=20)),
                ('years', models.CharField(max_length=20)),
                ('month', models.CharField(max_length=20)),
                ('day', models.CharField(max_length=20)),
                ('zzface', models.CharField(max_length=20)),
                ('ztimeday', models.IntegerField()),
                ('ztime', models.CharField(max_length=20)),
                ('lztime', models.CharField(max_length=20)),
                ('salary', models.FloatField()),
                ('sysalary', models.FloatField()),
                ('sbbase', models.FloatField()),
                ('gjjbase', models.FloatField()),
                ('znedu', models.FloatField()),
                ('jxedu', models.FloatField()),
                ('zfdklx', models.FloatField()),
                ('zfzj', models.FloatField()),
                ('dbyl', models.FloatField()),
                ('sylr', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('auth', models.CharField(default=[False, False, False, False], max_length=50, verbose_name='权限认证')),
                ('name', models.CharField(max_length=10, verbose_name='昵称')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='用户名')),
                ('password', models.CharField(max_length=180, verbose_name='密码')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='管理员')),
                ('date_joined', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
